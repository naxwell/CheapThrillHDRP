using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime.Serialization;


[RealtimeModel]
public partial class normcoreMultipleComponentsTest
{
    [RealtimeProperty(2000, true, true)]
    private float _trans;
    [RealtimeProperty(2001, true, true)]
    private bool _spaceOdessey;

    // Start is called before the first frame update
    void Start()
    {

    }

    // Update is called once per frame
    void Update()
    {

    }
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class normcoreMultipleComponentsTest : IModel {
    // Properties
    public float trans {
        get { return _cache.LookForValueInCache(_trans, entry => entry.transSet, entry => entry.trans); }
        set { if (value == trans) return; _cache.UpdateLocalCache(entry => { entry.transSet = true; entry.trans = value; return entry; }); FireTransDidChange(value); }
    }
    public bool spaceOdessey {
        get { return _cache.LookForValueInCache(_spaceOdessey, entry => entry.spaceOdesseySet, entry => entry.spaceOdessey); }
        set { if (value == spaceOdessey) return; _cache.UpdateLocalCache(entry => { entry.spaceOdesseySet = true; entry.spaceOdessey = value; return entry; }); FireSpaceOdesseyDidChange(value); }
    }
    
    // Events
    public delegate void TransDidChange(normcoreMultipleComponentsTest model, float value);
    public event         TransDidChange transDidChange;
    public delegate void SpaceOdesseyDidChange(normcoreMultipleComponentsTest model, bool value);
    public event         SpaceOdesseyDidChange spaceOdesseyDidChange;
    
    // Delta updates
    private struct LocalCacheEntry {
        public bool  transSet;
        public float trans;
        public bool  spaceOdesseySet;
        public bool  spaceOdessey;
    }
    
    private LocalChangeCache<LocalCacheEntry> _cache;
    
    public normcoreMultipleComponentsTest() {
        _cache = new LocalChangeCache<LocalCacheEntry>();
    }
    
    // Events
    public void FireTransDidChange(float value) {
        try {
            if (transDidChange != null)
                transDidChange(this, value);
        } catch (System.Exception exception) {
            Debug.LogException(exception);
        }
    }
    public void FireSpaceOdesseyDidChange(bool value) {
        try {
            if (spaceOdesseyDidChange != null)
                spaceOdesseyDidChange(this, value);
        } catch (System.Exception exception) {
            Debug.LogException(exception);
        }
    }
    
    // Serialization
    enum PropertyID {
        Trans = 2000,
        SpaceOdessey = 2001,
    }
    
    public int WriteLength(StreamContext context) {
        int length = 0;
        
        if (context.fullModel) {
            // Mark unreliable properties as clean and flatten the in-flight cache.
            // TODO: Move this out of WriteLength() once we have a prepareToWrite method.
            _trans = trans;
            _spaceOdessey = spaceOdessey;
            _cache.Clear();
            
            // Write all properties
            length += WriteStream.WriteFloatLength((uint)PropertyID.Trans);
            length += WriteStream.WriteVarint32Length((uint)PropertyID.SpaceOdessey, _spaceOdessey ? 1u : 0u);
        } else {
            // Reliable properties
            if (context.reliableChannel) {
                LocalCacheEntry entry = _cache.localCache;
                if (entry.transSet)
                    length += WriteStream.WriteFloatLength((uint)PropertyID.Trans);
                if (entry.spaceOdesseySet)
                    length += WriteStream.WriteVarint32Length((uint)PropertyID.SpaceOdessey, entry.spaceOdessey ? 1u : 0u);
            }
        }
        
        return length;
    }
    
    public void Write(WriteStream stream, StreamContext context) {
        if (context.fullModel) {
            // Write all properties
            stream.WriteFloat((uint)PropertyID.Trans, _trans);
            stream.WriteVarint32((uint)PropertyID.SpaceOdessey, _spaceOdessey ? 1u : 0u);
        } else {
            // Reliable properties
            if (context.reliableChannel) {
                LocalCacheEntry entry = _cache.localCache;
                if (entry.transSet || entry.spaceOdesseySet)
                    _cache.PushLocalCacheToInflight(context.updateID);
                
                if (entry.transSet)
                    stream.WriteFloat((uint)PropertyID.Trans, entry.trans);
                if (entry.spaceOdesseySet)
                    stream.WriteVarint32((uint)PropertyID.SpaceOdessey, entry.spaceOdessey ? 1u : 0u);
            }
        }
    }
    
    public void Read(ReadStream stream, StreamContext context) {
        bool transExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.transSet);
        bool spaceOdesseyExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.spaceOdesseySet);
        
        // Remove from in-flight
        if (context.deltaUpdatesOnly && context.reliableChannel)
            _cache.RemoveUpdateFromInflight(context.updateID);
        
        // Loop through each property and deserialize
        uint propertyID;
        while (stream.ReadNextPropertyID(out propertyID)) {
            switch (propertyID) {
                case (uint)PropertyID.Trans: {
                    float previousValue = _trans;
                    
                    _trans = stream.ReadFloat();
                    
                    if (!transExistsInChangeCache && _trans != previousValue)
                        FireTransDidChange(_trans);
                    break;
                }
                case (uint)PropertyID.SpaceOdessey: {
                    bool previousValue = _spaceOdessey;
                    
                    _spaceOdessey = (stream.ReadVarint32() != 0);
                    
                    if (!spaceOdesseyExistsInChangeCache && _spaceOdessey != previousValue)
                        FireSpaceOdesseyDidChange(_spaceOdessey);
                    break;
                }
                default:
                    stream.SkipProperty();
                    break;
            }
        }
    }
}
/* ----- End Normal Autogenerated Code ----- */
