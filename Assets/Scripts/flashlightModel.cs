using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime.Serialization;


[RealtimeModel]
public partial class flashlightModel
{
    [RealtimeProperty(245, true, true)]
    private float _lightPower;
    // Start is called before the first frame update
    void Start()
    {

    }

    // Update is called once per frame
    void Update()
    {

    }
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class flashlightModel : IModel {
    // Properties
    public float lightPower {
        get { return _cache.LookForValueInCache(_lightPower, entry => entry.lightPowerSet, entry => entry.lightPower); }
        set { if (value == lightPower) return; _cache.UpdateLocalCache(entry => { entry.lightPowerSet = true; entry.lightPower = value; return entry; }); FireLightPowerDidChange(value); }
    }
    
    // Events
    public delegate void LightPowerDidChange(flashlightModel model, float value);
    public event         LightPowerDidChange lightPowerDidChange;
    
    // Delta updates
    private struct LocalCacheEntry {
        public bool  lightPowerSet;
        public float lightPower;
    }
    
    private LocalChangeCache<LocalCacheEntry> _cache;
    
    public flashlightModel() {
        _cache = new LocalChangeCache<LocalCacheEntry>();
    }
    
    // Events
    public void FireLightPowerDidChange(float value) {
        try {
            if (lightPowerDidChange != null)
                lightPowerDidChange(this, value);
        } catch (System.Exception exception) {
            Debug.LogException(exception);
        }
    }
    
    // Serialization
    enum PropertyID {
        LightPower = 245,
    }
    
    public int WriteLength(StreamContext context) {
        int length = 0;
        
        if (context.fullModel) {
            // Mark unreliable properties as clean and flatten the in-flight cache.
            // TODO: Move this out of WriteLength() once we have a prepareToWrite method.
            _lightPower = lightPower;
            _cache.Clear();
            
            // Write all properties
            length += WriteStream.WriteFloatLength((uint)PropertyID.LightPower);
        } else {
            // Reliable properties
            if (context.reliableChannel) {
                LocalCacheEntry entry = _cache.localCache;
                if (entry.lightPowerSet)
                    length += WriteStream.WriteFloatLength((uint)PropertyID.LightPower);
            }
        }
        
        return length;
    }
    
    public void Write(WriteStream stream, StreamContext context) {
        if (context.fullModel) {
            // Write all properties
            stream.WriteFloat((uint)PropertyID.LightPower, _lightPower);
        } else {
            // Reliable properties
            if (context.reliableChannel) {
                LocalCacheEntry entry = _cache.localCache;
                if (entry.lightPowerSet)
                    _cache.PushLocalCacheToInflight(context.updateID);
                
                if (entry.lightPowerSet)
                    stream.WriteFloat((uint)PropertyID.LightPower, entry.lightPower);
            }
        }
    }
    
    public void Read(ReadStream stream, StreamContext context) {
        bool lightPowerExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.lightPowerSet);
        
        // Remove from in-flight
        if (context.deltaUpdatesOnly && context.reliableChannel)
            _cache.RemoveUpdateFromInflight(context.updateID);
        
        // Loop through each property and deserialize
        uint propertyID;
        while (stream.ReadNextPropertyID(out propertyID)) {
            switch (propertyID) {
                case (uint)PropertyID.LightPower: {
                    float previousValue = _lightPower;
                    
                    _lightPower = stream.ReadFloat();
                    
                    if (!lightPowerExistsInChangeCache && _lightPower != previousValue)
                        FireLightPowerDidChange(_lightPower);
                    break;
                }
                default:
                    stream.SkipProperty();
                    break;
            }
        }
    }
}
/* ----- End Normal Autogenerated Code ----- */
