using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime.Serialization;


[RealtimeModel]
public partial class directionalLightModel
{
    [RealtimeProperty(10, false, true)]
    private float _intensity;
    // Start is called before the first frame update
    void Start()
    {

    }

    // Update is called once per frame
    void Update()
    {

    }
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class directionalLightModel : IModel {
    // Properties
    public float intensity {
        get { return _intensity; }
        set { if (value == _intensity) return; _intensityShouldWrite = true; _intensity = value; FireIntensityDidChange(value); }
    }
    
    // Events
    public delegate void IntensityDidChange(directionalLightModel model, float value);
    public event         IntensityDidChange intensityDidChange;
    
    private bool _intensityShouldWrite;
    
    public directionalLightModel() {
    }
    
    // Events
    public void FireIntensityDidChange(float value) {
        try {
            if (intensityDidChange != null)
                intensityDidChange(this, value);
        } catch (System.Exception exception) {
            Debug.LogException(exception);
        }
    }
    
    // Serialization
    enum PropertyID {
        Intensity = 10,
    }
    
    public int WriteLength(StreamContext context) {
        int length = 0;
        
        if (context.fullModel) {
            // Write all properties
            length += WriteStream.WriteFloatLength((uint)PropertyID.Intensity);
        } else {
            // Unreliable properties
            if (context.unreliableChannel) {
                if (_intensityShouldWrite) {
                    length += WriteStream.WriteFloatLength((uint)PropertyID.Intensity);
                }
            }
        }
        
        return length;
    }
    
    public void Write(WriteStream stream, StreamContext context) {
        if (context.fullModel) {
            // Write all properties
            stream.WriteFloat((uint)PropertyID.Intensity, _intensity);
            _intensityShouldWrite = false;
        } else {
            // Unreliable properties
            if (context.unreliableChannel) {
                if (_intensityShouldWrite) {
                    stream.WriteFloat((uint)PropertyID.Intensity, _intensity);
                    _intensityShouldWrite = false;
                }
            }
        }
    }
    
    public void Read(ReadStream stream, StreamContext context) {
        // Loop through each property and deserialize
        uint propertyID;
        while (stream.ReadNextPropertyID(out propertyID)) {
            switch (propertyID) {
                case (uint)PropertyID.Intensity: {
                    float previousValue = _intensity;
                    
                    _intensity = stream.ReadFloat();
                    _intensityShouldWrite = false;
                    
                    if (_intensity != previousValue)
                        FireIntensityDidChange(_intensity);
                    break;
                }
                default:
                    stream.SkipProperty();
                    break;
            }
        }
    }
}
/* ----- End Normal Autogenerated Code ----- */
